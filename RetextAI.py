"""–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª—å—é."""
from transformers import T5ForConditionalGeneration, T5Tokenizer
"""–ú–æ–¥—É–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞."""
from telegram import Update
"""–ú–æ–¥—É–ª—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ."""
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
""" """
import nest_asyncio
""" """
import asyncio
""" """
from langdetect import detect, DetectorFactory

nest_asyncio.apply()

DetectorFactory.seed = 0
#
MODEL_NAME = 'cointegrated/rut5-base-paraphraser'
model = T5ForConditionalGeneration.from_pretrained(MODEL_NAME)
tokenizer = T5Tokenizer.from_pretrained(MODEL_NAME)

model.eval()


def paraphrase(text, sequences, beams=15, grams=4, do_sample=True):
    """ """
    x = tokenizer(text, return_tensors='pt', padding=True).to(model.device)
    max_size = int(x.input_ids.shape[1] * 1.5 + 10)
    out = model.generate(**x, encoder_no_repeat_ngram_size=grams,
                         num_beams=beams, max_length=max_size,
                         num_return_sequences=sequences,
                         do_sample=do_sample)
    return tokenizer.batch_decode(out, skip_special_tokens=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ """
    context.user_data.clear()
    context.user_data['state'] = 'waiting_for_text'
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ú—ã RetextAI - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è\n"
        "–ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤. –ó–¥–µ—Å—å –º—ã\n"
        "–ø–æ–º–æ–∂–µ–º –í–∞–º —Å–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç—ã —è—Ä—á–µ\n"
        "–∏ —É–Ω–∏–∫–∞–ª—å–Ω–µ–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Ö —Å–º—ã—Å–ª, —Å\n"
        "–ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ\n"
        "–Ω–∞–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ """
    await update.message.reply_text(
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å.\n"
        "2. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–æ 15).\n"
        "3. –Ø –≤–µ—Ä–Ω—É –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
        "4. –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, —è –ø–æ–ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤."
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ """
    state = context.user_data.get('state', 'waiting_for_text')
    user_input = update.message.text

    if state == 'waiting_for_text':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞.
        if len(user_input) > 500:
            await update.message.reply_text("""
            –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤.
            """)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞.
        try:
            detected_language = detect(user_input)
            if detected_language != 'ru':
                await update.message.reply_text("""
                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
                –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.
                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
                """)
                return
        except Exception as e:
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {e}")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
        context.user_data['text_to_paraphrase'] = user_input
        context.user_data['state'] = 'waiting_for_options'
        await update.message.reply_text("""
        –°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ? (–¥–æ 15)
        """)

    elif state == 'waiting_for_options':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.
        try:
            sequences = int(user_input)
            if sequences < 1 or sequences > 15:
                await update.message.reply_text("""
                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 15.
                """)
                return

            context.user_data['sequences'] = sequences
            context.user_data['state'] = 'waiting_for_feedback'

            # –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.
            await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç...")
            text_to_paraphrase = context.user_data['text_to_paraphrase']
            paraphrased_texts = paraphrase(text_to_paraphrase, sequences=sequences)

            response = "\n\n".join(paraphrased_texts)
            await update.message.reply_text(f"–í–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è:\n{response}")

            await update.message.reply_text("""
            –í–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç? (–î–∞/–ù–µ—Ç)
            """)
            context.user_data['paraphrased_texts'] = paraphrased_texts
        except ValueError:
            await update.message.reply_text("""
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 15.
            """)

    elif state == 'waiting_for_feedback':
        feedback = user_input.lower()
        if feedback == "–¥–∞":
            await update.message.reply_text("""
            –û—Ç–ª–∏—á–Ω–æ! –†–∞–¥, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.
            –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç.
            """)
            context.user_data.clear()
            context.user_data['state'] = 'waiting_for_text'
        elif feedback == "–Ω–µ—Ç":
            await update.message.reply_text("üîÑ –ü–æ–ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞...")
            text_to_paraphrase = context.user_data['text_to_paraphrase']
            sequences = context.user_data['sequences']
            paraphrased_texts = paraphrase(text_to_paraphrase, sequences=sequences)

            response = "\n\n".join(paraphrased_texts)
            await update.message.reply_text(f"–í–æ—Ç –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è:\n{response}")
            await update.message.reply_text("""
            –í–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç? (–î–∞/–ù–µ—Ç)
            """)
        else:
            await update.message.reply_text("""
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.
            """)


async def main():
    """ """
    TOKEN = "7979216405:AAGWpD07_1D9isAXZoIM2TRO_h7sSHGZbFQ"

    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π.
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
